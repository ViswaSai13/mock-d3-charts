{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson';\nimport * as i0 from \"@angular/core\";\nexport let MapChartComponent = /*#__PURE__*/(() => {\n  class MapChartComponent {\n    constructor() {\n      // @Input() mapData: any\n      this.countryClick = new EventEmitter();\n    }\n\n    ngOnInit() {\n      d3.select('.mapChart').selectAll(\"svg\").remove();\n      this.mapChart();\n    }\n\n    ngAfterViewInit() {\n      d3.select('.mapChart').selectAll(\"svg\").remove();\n      this.mapChart();\n    }\n\n    ngOnChanges() {\n      d3.select('.mapChart').selectAll(\"svg\").remove();\n      this.mapChart();\n    }\n\n    mapChart() {\n      const meteoriteDataURL = \"https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/meteorite-strike-data.json\";\n      const worldMapURL = \"https://gist.githubusercontent.com/d3noob/5193723/raw/world-110m2.json\";\n      const mainCitiesURL = \"https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_110m_populated_places_simple.geojson\";\n      const width = 1000,\n            height = 500;\n      const svg = d3.select(\".svg-con\").append(\"svg\").attr(\"width\", width).attr(\"height\", height).call(d3.zoom().on(\"zoom\", zoomed));\n      const g = svg.append(\"g\");\n      const projection = d3.geoMercator().scale(150).translate([width / 2, height / 2 + 50]);\n      const path = d3.geoPath().projection(projection);\n      const showInfo = d3.select('.show-if');\n      const emitter = this.countryClick; // load and display the world map\n\n      d3.json(worldMapURL).then(function (world) {\n        d3.json(mainCitiesURL).then(function (mainCities) {\n          console.log(mainCities);\n          g.selectAll(\"path\").data(topojson.feature(world, world.objects.countries).features).enter().append(\"path\").attr(\"stroke\", \"#A8C4D5\").attr(\"fill\", \"#f0f0f7\").attr(\"d\", path);\n          g.selectAll(\"circle\").data(mainCities.features).enter().append(\"circle\").attr('cx', function (d) {\n            return projection(d.geometry.coordinates)[0];\n          }).attr('cy', function (d) {\n            return projection(d.geometry.coordinates)[1];\n          }).attr('r', function (d) {\n            // return Math.sqrt(Math.sqrt(d.properties.pop_max))\n            return Math.floor(Math.pow(d.properties.pop_max, 1 / 7));\n          }).attr('fill', \"#0274ff2b\").attr('fill-opacity', 0.5).attr('stroke', \"#3490ff\").attr('stroke-width', 1).attr('cursor', 'pointer').on('click', function (e, d) {\n            emitter.emit(d);\n          }); // Hover affect\n\n          g.selectAll(\"circle\").on('mouseover', function (e, d) {\n            showInfo.style(\"left\", e.pageX + 10 + \"px\").style(\"top\", e.pageY + 10 + \"px\");\n            d3.select('.show-if').style('display', 'inline-block');\n            d3.select('.cityName').text(d.properties.adm1name);\n            d3.select('.countryName').text(d.properties.adm0name);\n            d3.select('.popSize').text(d.properties.pop_max);\n          }).on('mouseout', function (e, d) {\n            d3.select('.show-if').style('display', 'none');\n          });\n        }, error => {\n          console.error(error);\n        });\n      }, error => {\n        console.error(error);\n      });\n\n      function zoomed(e) {\n        // console.log(e)\n        g.attr(\"transform\", e.transform);\n      }\n    }\n\n  }\n\n  MapChartComponent.ɵfac = function MapChartComponent_Factory(t) {\n    return new (t || MapChartComponent)();\n  };\n\n  MapChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MapChartComponent,\n    selectors: [[\"app-map-chart\"]],\n    outputs: {\n      countryClick: \"countryClick\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 14,\n    vars: 0,\n    consts: [[1, \"mapChart\", \"svg-con\", \"text-center\"], [1, \"show-if\", \"br5\"], [1, \"cityName\"], [1, \"countryName\"], [1, \"popSize\"]],\n    template: function MapChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\");\n        i0.ɵɵtext(3, \"Place: \");\n        i0.ɵɵelementStart(4, \"span\", 2);\n        i0.ɵɵtext(5, \"Stanley\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\");\n        i0.ɵɵtext(7, \"Country: \");\n        i0.ɵɵelementStart(8, \"span\", 3);\n        i0.ɵɵtext(9, \"Stanley\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"div\");\n        i0.ɵɵtext(11, \"Population: \");\n        i0.ɵɵelementStart(12, \"span\", 4);\n        i0.ɵɵtext(13, \"100\");\n        i0.ɵɵelementEnd()()();\n      }\n    },\n    styles: [\".show-if[_ngcontent-%COMP%]{background-color:#e3f0ff;color:#000;padding:10px;border:1px solid #5CA6FF;display:none;position:absolute}.show-if[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{padding:0;border:0;margin:4px 0;font-size:12px;font-family:Roboto-light}.show-if[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-family:Roboto}svg[_ngcontent-%COMP%]{border:1px solid white}path[_ngcontent-%COMP%]{stroke-width:.25px}\"]\n  });\n  return MapChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}